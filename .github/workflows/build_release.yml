name: CMake Build Matrix

env:
  BUILD_TYPE: Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release"
        required: false
        default: nightly
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

jobs:
  build:
    name: "${{matrix.config.toolchain}}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows",
              toolchain: "Windows-Latest-MSVC",
              artifact: "Windows.zip",
              artifact_type: "zip",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
            }
          - {
              name: "Linux",
              toolchain: "Ubuntu-Latest-GCC",
              artifact: "Linux.tar.gz",
              artifact_type: "tar",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
            }
          - {
              name: "macOS",
              toolchain: "macOS-Latest-Clang",
              artifact: "macOS.tar.gz",
              artifact_type: "tar",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
            }
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup devshell (Windows only)
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure CMake
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})

          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")

          execute_process(
            COMMAND cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -D CMAKE_C_COMPILER=$ENV{CC}
              -D CMAKE_CXX_COMPILER=$ENV{CXX}
              -G Ninja
              -D CMAKE_MAKE_PROGRAM=ninja
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Build
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

          execute_process(
            COMMAND cmake --build build
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()

      - name: Install Strip
        run: cmake --install build --prefix ${{ matrix.config.name }} --strip

      - name: Package
        uses: thedoctor0/zip-release@master
        with:
          path: ${{ matrix.config.name }}
          filename: ${{ matrix.config.artifact }}
          type: ${{ matrix.config.artifact_type }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}
          retention-days: 5

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: release

      - if: github.event_name == 'workflow_dispatch'
        name: Set tag name (dispatch)
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'push'
        name: Set tag name
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Release ${{ env.TAG_NAME }}"
          fail_on_unmatched_files: true
          generate_release_notes: false
          files: |
            release/**/*.zip
            release/**/*.tar.gz
